 {"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-06-23T05:59:27.072033Z\",\"iopub.execute_input\":\"2023-06-23T05:59:27.072367Z\",\"iopub.status.idle\":\"2023-06-23T05:59:29.830807Z\",\"shell.execute_reply.started\":\"2023-06-23T05:59:27.072340Z\",\"shell.execute_reply\":\"2023-06-23T05:59:29.829832Z\"}}\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom nltk import FreqDist, bigrams\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\nfrom wordcloud import WordCloud\nimport seaborn as sns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-06-23T06:22:17.513305Z\",\"iopub.execute_input\":\"2023-06-23T06:22:17.515203Z\",\"iopub.status.idle\":\"2023-06-23T06:22:19.376154Z\",\"shell.execute_reply.started\":\"2023-06-23T06:22:17.515143Z\",\"shell.execute_reply\":\"2023-06-23T06:22:19.374922Z\"}}\nimport pandas as pd\nfrom nltk import FreqDist, word_tokenize\nfrom nltk.corpus import stopwords\nimport matplotlib.pyplot as plt\n\n# Specify the path and filename of the CSV\ncsv_path = '/kaggle/input/2020-to-23-warrenbuffet-letters-tokenised/_tokenised text from 2020 to 23.csv'\n\n# Read the CSV file into a DataFrame\ndf = pd.read_csv(csv_path, header=None)\n\n# Transpose the DataFrame to treat the single row as a column\ndf_transposed = df.transpose()\n\n# Convert the column to string type\ndf_transposed[0] = df_transposed[0].astype(str)\n\n# Concatenate the tokenized text from the transposed DataFrame\ntokenized_text = ' '.join(df_transposed[0])\n\n# Tokenize the text into individual words\nwords = word_tokenize(tokenized_text)\n\n# Remove stopwords from the list of words\nstopwords_set = set(stopwords.words('english'))\nwords = [word for word in words if word.lower() not in stopwords_set]\n\n# Create a frequency distribution of the words\nword_freq = FreqDist(words)\ncommon_words = word_freq.most_common(10)\n\n# Extract the word and frequency data\nword_data = [word[0] for word in common_words]\nfrequency_data = [word[1] for word in common_words]\n\n# Create a bar plot of the common words frequency\nplt.bar(word_data, frequency_data)\nplt.xlabel('Words')\nplt.ylabel('Frequency')\nplt.title('Common Words Frequency')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-06-23T06:23:46.933904Z\",\"iopub.execute_input\":\"2023-06-23T06:23:46.934338Z\",\"iopub.status.idle\":\"2023-06-23T06:23:47.908353Z\",\"shell.execute_reply.started\":\"2023-06-23T06:23:46.934296Z\",\"shell.execute_reply\":\"2023-06-23T06:23:47.907058Z\"}}\n# Generate a word cloud\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_freq)\n\n# Plot the word cloud\nplt.figure(figsize=(10, 5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.title('Word Cloud')\nplt.show()\n\n# %% [code]\n","metadata":{"_uuid":"6c899d97-23ec-415e-a3f5-531462ad5e52","_cell_guid":"8befd7be-aae2-4e7c-b053-a29d49eb3b0c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}
